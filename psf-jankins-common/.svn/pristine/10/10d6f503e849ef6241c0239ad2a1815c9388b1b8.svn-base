package co.jankins.psf.common.conversion;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import co.jankins.psf.common.exception.JankinsMarshallException;


public class MarshallServiceImpl implements MarshallService{



	@Override
	public String marshallObject(Object object, Class... c) {
		// TODO Auto-generated method stub
		JAXBContext jc=null;
		Marshaller m=null;
		
		//OutPutStream
		OutputStream xmlOutput = new OutputStream() {
			private StringBuilder string = new StringBuilder();

			@Override
			public void write
			(
					int b) throws IOException {
				this.string.append((char) b);
			}

			@Override
			public String toString
			() {
				return this.string.toString();
			}
		};


		//Marshall Object
		try {
			jc=JAXBContext.newInstance(c);
			m=jc.createMarshaller();
			m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
			m.marshal(object, xmlOutput);
			xmlOutput.flush();
			xmlOutput.close();
		} catch (JAXBException e) {
			// TODO Auto-generated catch block
			throw new JankinsMarshallException(e);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			throw new JankinsMarshallException(e);
		}finally{

		}

		return xmlOutput.toString();
	}

	@Override
	public Object unmarshallXml(String Xml, Class... c) throws JankinsMarshallException {
		// TODO Auto-generated method stub
		JAXBContext jc=null;
		Unmarshaller um=null;
		Object object=null;

		//UnMarshall Object
		try {
			jc=JAXBContext.newInstance(c);
			um=jc.createUnmarshaller();
			InputStream is = new ByteArrayInputStream( Xml.toString().getBytes() );
			object = um.unmarshal(is);
		} catch (JAXBException e) {
			// TODO Auto-generated catch block
			throw new JankinsMarshallException(e);
		}


		return object;
	}

}
