package co.jankins.psf.common.util;

import co.jankins.psf.common.exception.JankinsMarshallException;

import com.co.farmatech.metrofarm.dto.DtoUsuario;

import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class SendEmail {
	String Destino,Mensaje;

	public SendEmail(DtoUsuario usuario) {
		Destino=usuario.getCorreo();
		this.Mensaje="Senor(a): " + usuario.getNombres() + "\n"
                        + "\n"
                        + "su usuario de acceso es: " + usuario.getUsuario() + "\n"
                        + "su password de acceso es: " + usuario.getContrasena() + "\n"
                        + "\n"
                        + "\n"
                        + "Guarde bien este password, lo va a necesitar para ingresar al sistema METRO FARM"
                        + "\n"
                        + "Hasta pronto y mucha suerte.";
	}



	public void Enviar() {
		// Se comprueba que el número de argumentos es el correcto
		String[] args = new String[2];
		args[0] = "ayudas.metrofarm@gmail.com";
		args[1] = Destino;
		if (args.length != 2) {
			System.out.println("Ha de enviar dos parámetros \n"
					+ "java EnviarCorreo fromAddress toAddress");
			System.exit(1);
		}
		// Se obtienen el from y el to recibidos como parámetros
		String from = args[0];
		String to = args[1];
		// Se obtienen las propiedades del sistema y se establece el servidor SMTP 
		String smtpHost = "smtp.gmail.com";
		Properties props = System.getProperties();
		props.put("mail.smtp.host", smtpHost);
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.auth", "true");
		props.put("mail.user", "ayudas.metrofarm@gmail.com");
		props.put("mail.password", "ayudasmetrofarm");
		props.put("mail.smtp.port","465");
		props.put("mail.smtp.socketFactory.port", "465");
		props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		// Se obtiene una sesión con las propiedades anteriormente definidas

		Session sesion = Session.getDefaultInstance(props,
				new Authenticator() {
			@Override
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(
						"ayudas.metrofarm@gmail.com", "ayudasmetrofarm");
			}
		});
		// Capturar las excepciones
		try {
			// Se crea un mensaje vacío
			Message mensaje = new MimeMessage(sesion);
			// Se rellenan los atributos y el contenido
			// Asunto
			mensaje.setSubject("Correos info MetroFarm");
			// Emisor del mensaje
			mensaje.setFrom(new InternetAddress(from));
			// Receptor del mensaje
			mensaje.addRecipient(Message.RecipientType.TO,
					new InternetAddress(to));
			// Cuerpo del mensaje
			mensaje.setText(Mensaje);
			// Se envía el mensaje
			Transport.send(mensaje);
		} catch (MessagingException e) {
			e.printStackTrace();
			throw new JankinsMarshallException("No se pudo enviar el correo electronico",e);
		}
		
	}
}
